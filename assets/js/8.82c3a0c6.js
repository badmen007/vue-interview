(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{396:function(t,a,e){"use strict";e.r(a);var s=e(54),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-请说一下vue2响应式数据的理解-先知道基本的问题在哪-源码的角度回答-你用的时候会有哪些问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-请说一下vue2响应式数据的理解-先知道基本的问题在哪-源码的角度回答-你用的时候会有哪些问题"}},[t._v("#")]),t._v(" 1.请说一下"),e("code",[t._v("Vue2")]),t._v("响应式数据的理解  （先知道基本的问题在哪， 源码的角度回答， 你用的时候会有哪些问题）")]),t._v(" "),e("p",[t._v("可以监控一个数据的修改和获取操作。 针对对象格式会给每个对象的属性进行劫持 Object.defineProperty")]),t._v(" "),e("blockquote",[e("p",[t._v("源码层面  initData -> observe -> defineReactive方法 （内部对所有属性进行了重写 性能问题） 递归增加对象中的对象增加getter和setter")])]),t._v(" "),e("blockquote",[e("p",[t._v("我们在使用Vue的时候如果 层级过深（考虑优化） 如果数据不是响应式的就不要放在data中了。 我们属性取值的时候尽量避免多次取值。 如果有些对象是放到data中的但是不是响应式的可以考虑采用Object.freeze() 来冻结对象")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let total = 0;\nfor(let i = 0; ; i< 100；i++>){\n    total += i;\n}\nthis.timer = total\n")])])]),e("h2",{attrs:{id:"_2-vue中如何检测数组变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue中如何检测数组变化"}},[t._v("#")]),t._v(" 2."),e("code",[t._v("Vue")]),t._v("中如何检测数组变化?")]),t._v(" "),e("p",[t._v("vue2中检测数组的变化并没有采用defineProperty 因为修改索引的情况不多(如果直接使用defineProperty会浪费大量性能)。 采用重写数组的变异方法来实现 （函数劫持）")]),t._v(" "),e("blockquote",[e("p",[t._v("initData -> observe -> 对我们传入的数组进行原型链修改，后续调用的方法都是重写后的方法  -》 对数组中每个对象也再次进行代理")])]),t._v(" "),e("p",[t._v("修改数组索引 ，修改长度是无法进行监控的   arr[1] = 100;  arr.length = 300;  不会触发视图更新的")]),t._v(" "),e("p",[t._v("arr[0].xxx = 100; 因为数组中的对象会被observe")]),t._v(" "),e("h2",{attrs:{id:"_3-vue中如何进行依赖收集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue中如何进行依赖收集"}},[t._v("#")]),t._v(" 3."),e("code",[t._v("Vue")]),t._v("中如何进行依赖收集？")]),t._v(" "),e("ul",[e("li",[t._v("所谓的依赖收集 （观察者模式） 被观察者指代的是数据 (dep)， 观察者（watcher 3中渲染wather、计算属性、用户watcher）")]),t._v(" "),e("li",[t._v("一个watcher中可能对应着多个数据 watcher中还需要保存dep （重新渲染的时候可以让属性重新记录watcher） 计算属性也会用到")])]),t._v(" "),e("blockquote",[e("p",[t._v("多对多的关系 一个dep 对应多个watcher ， 一个watcher有多个dep 。 默认渲染的时候会进行依赖收集（会触发get方法）， 数据更新了就找到属性对应的watcher去触发更新")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.zhufengpeixun.com/jg-vue/assets/img/fow.34669a8f.png",alt:""}})]),t._v(" "),e("p",[t._v("取值的时候收集依赖，设值的时候更新视图")]),t._v(" "),e("h2",{attrs:{id:"_4-如何理解vue中模板编译原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何理解vue中模板编译原理"}},[t._v("#")]),t._v(" 4.如何理解"),e("code",[t._v("Vue")]),t._v("中模板编译原理")]),t._v(" "),e("p",[t._v("我们用户传递的是template属性，我们需要将这个template编译成render函数")]),t._v(" "),e("ul",[e("li",[t._v("template -> ast语法树")]),t._v(" "),e("li",[t._v("对语法树进行标记 （标记的是静态节点）")]),t._v(" "),e("li",[t._v("将ast语法树生成render函数")])]),t._v(" "),e("blockquote",[e("p",[t._v("最终每次渲染可以调用render函数返回对应的虚拟节点  (递归是先子后父)")])]),t._v(" "),e("h2",{attrs:{id:"_5-vue生命周期钩子是如何实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue生命周期钩子是如何实现的"}},[t._v("#")]),t._v(" 5."),e("code",[t._v("Vue")]),t._v("生命周期钩子是如何实现的")]),t._v(" "),e("p",[t._v("就是内部利用了一个发布订阅模式 将用户写的钩子维护成了一个数组，后续一次调用 callHook。  主要靠的是mergeOptions")]),t._v(" "),e("blockquote",[e("p",[t._v("内部就是一个发布订阅模式")])]),t._v(" "),e("p",[t._v("为什么有些钩子的执行是先子后父亲，有些是先父后子  组件渲染是如何渲染的？")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遇到父组件就先渲染父组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遇到子组件就渲染子组件")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("my"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("button   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先渲染子组件后 完成才能渲染完毕父组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h2",{attrs:{id:"_6-vue的生命周期方法有哪些-一般在哪一步发送请求及原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue的生命周期方法有哪些-一般在哪一步发送请求及原因"}},[t._v("#")]),t._v(" 6."),e("code",[t._v("Vue")]),t._v("的生命周期方法有哪些？一般在哪一步发送请求及原因")]),t._v(" "),e("p",[t._v("beforeCreate  这里没有实现响应式数据  vue3 中不需要用了 没用\ncreated   √  拿到的是响应式的属性  (不涉及到dom渲染) 这个api可以在服务端渲染中使用  在vue3中setup\nbeforeMount  没用实际价值\nmounted  √  表示组件挂载完成了 vm.$el 第一次渲染完毕了，等待渲染完毕后   mounted中可以获取$el\nbeforeUpdate\nupdated  更新前后\nactivated  keep-alive\ndeactivated\nbeforeDestroy  √  手动调用移除会触发\ndestroyed  √  销毁后触发\nerrorCaptured 捕获错误")]),t._v(" "),e("blockquote",[e("p",[t._v("一般最多的在mounted （created不是比mounted早吗？ 代码是同步执行的，请求是异步的）  服务端渲染不都是在created中，真正使用服务端渲染的时候 基本上也不会使用created （服务端没有dom 也没有mounted钩子）  在哪里发请求主要看你要做什么事（请求的时候获取dom元素，都写在这里就可以的）")])]),t._v(" "),e("p",[t._v("created 执行完之后再执行的mounted 这个时候异步已经在cteated 执行完了吧  错误的\n因为生命周期是顺序调用的 （同步的） 请求是异步的  所以最终获取到数据肯定是在mounted之后的")]),t._v(" "),e("h2",{attrs:{id:"_7-vue-mixin的使用场景和原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue-mixin的使用场景和原理"}},[t._v("#")]),t._v(" 7."),e("code",[t._v("Vue.mixin")]),t._v("的使用场景和原理")]),t._v(" "),e("p",[t._v("我们可以通过Vue.mixin来实现逻辑的复用, 问题在于数据来源不明确。 声明的时候可能会导致命名冲突。 高阶组件， vue3 采用的就是compositionAPI解决了复用问题")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue.mixin({\n    data(){\n        return {xxx:11}\n    },\n    beforeCreate(){\n        this.$store = new Store();\n    },\n    beforeDestroy(){\n\n    }\n})\nVue.component('my',{\n    data(){\n        return { xxx:222}\n    },\n    template:'{{xxx}}'\n})\n")])])]),e("blockquote",[e("p",[t._v("mixin的核心就是合并属性 （内部采用了策略模式进行合并） 全局mixin，局部mixin。 针对不同的属性有不同的合并策略")])]),t._v(" "),e("h2",{attrs:{id:"_8-vue组件data为什么必须是个函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-vue组件data为什么必须是个函数"}},[t._v("#")]),t._v(" 8."),e("code",[t._v("Vue")]),t._v("组件data为什么必须是个函数？")]),t._v(" "),e("p",[t._v("原因就在于针对根实例而言，new Vue, 组件是通过同一个构造函数多次创建实例，如果是同一个对象的话那么数据会被互相影响。 每个组件的数据源都是独立的，那就每次都调用data返回一个新的对象")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Vue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nVue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("extend")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sub")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    Sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("extend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Child")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nc1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Child")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"_9-nexttick在哪里使用-原理是"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-nexttick在哪里使用-原理是"}},[t._v("#")]),t._v(" 9."),e("code",[t._v("nextTick")]),t._v("在哪里使用？原理是?")]),t._v(" "),e("p",[t._v("nextTick内部采用了异步任务进行了包装 （多个nextTick调用 会被合并成一次  内部会合并回调）最后在异步任务中批处理\n主要应用场景就是异步更新 （默认调度的时候 就会添加一个nextTick任务） 用户为了获取最终的渲染结果需要在内部任务执行之后在执行用户逻辑\n这时候用户需要将对应的逻辑放到nextTick中")]),t._v(" "),e("h2",{attrs:{id:"_10-computed和watch区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-computed和watch区别"}},[t._v("#")]),t._v(" 10."),e("code",[t._v("computed")]),t._v("和"),e("code",[t._v("watch")]),t._v("区别")]),t._v(" "),e("p",[t._v("computed 和 watch的相同点。 底层都会创建一个watcher (用法的区别 computed定义的属性可以在模板中使用,watch不能在视图中使用)")]),t._v(" "),e("ul",[e("li",[t._v("computed 默认不会立即执行  只有取值的时候才会执行 内部会唯一个dirty属性 来控制依赖的值是否发生变化。 默认计算属性需要同步返回结果 ( 有个包 就是让computed变成异步的)")]),t._v(" "),e("li",[t._v("watch 默认用户会提供一个回调函数，数据变化了就调用这个回调。 我们可以监控某个数据的变化 数据变化了执行某些操作")])]),t._v(" "),e("h2",{attrs:{id:"_11-vue-set方法是如何实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-vue-set方法是如何实现的"}},[t._v("#")]),t._v(" 11."),e("code",[t._v("Vue.set")]),t._v("方法是如何实现的")]),t._v(" "),e("p",[t._v("Vue.set 方法是vue中的一个补丁方法 （正常我们添加属性是不会触发更新的， 我们数组无法监控到索引和长度）")]),t._v(" "),e("p",[t._v("如何实现的 我们给每一个对象都增添了一个dep属性")]),t._v(" "),e("blockquote",[e("p",[t._v("vue3中也不需要此方法了 (当属性添加或者删除时 手动触发对象本身dep来进行更新)")])]),t._v(" "),e("h2",{attrs:{id:"_12-vue为什么需要虚拟dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-vue为什么需要虚拟dom"}},[t._v("#")]),t._v(" 12."),e("code",[t._v("Vue")]),t._v("为什么需要虚拟DOM")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("主要这个虚拟dom的好处是什么？  我们写的代码可能要针对不同的平台来使用 （weex，web，小程序） 可以跨平台，不需要考虑平台问题")])]),t._v(" "),e("li",[e("p",[t._v("不用关心兼容性问题， 可以在上层将对应的渲染方法传递给我 ， 我来通过虚拟dom渲染即可")])]),t._v(" "),e("li",[e("p",[t._v("diff算法 针对更新的时候， 有了虚拟dom之后我们可以通过diff算法来找到最后的差异进行修改真实dom （类似于在真实dom之间做了一个缓存）")])])]),t._v(" "),e("blockquote",[e("p",[t._v("跨平台 、diff算法")])]),t._v(" "),e("h2",{attrs:{id:"_13-vue中diff算法原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue中diff算法原理"}},[t._v("#")]),t._v(" 13."),e("code",[t._v("Vue")]),t._v("中"),e("code",[t._v("diff")]),t._v("算法原理")]),t._v(" "),e("p",[t._v("diff算法的特点就是平级比较 ， 内部采用了双指针方式进行了优化 优化了常见的操作。 采用了递归比较的方式")]),t._v(" "),e("h3",{attrs:{id:"针对一个节点的diff算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#针对一个节点的diff算法"}},[t._v("#")]),t._v(" 针对一个节点的diff算法")]),t._v(" "),e("ul",[e("li",[t._v("先拿出根节点来进行比较如果是同一个节点则比较属性 ， 如果不是同一个节点则直接换成最新的即可")]),t._v(" "),e("li",[t._v("同一个节点比较属性后，复用老节点")])]),t._v(" "),e("h3",{attrs:{id:"比较儿子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较儿子"}},[t._v("#")]),t._v(" 比较儿子")]),t._v(" "),e("ul",[e("li",[t._v("一方有儿子 一方没儿子 （删除 、 添加）")]),t._v(" "),e("li",[t._v("两方都有儿子\n"),e("ul",[e("li",[t._v("优化比较 头头  尾尾  交叉比对")]),t._v(" "),e("li",[t._v("就做一个映射表，用新的去映射表中查找此元素是否存在，存在则移动不存在则插入， 最后删除多余的")]),t._v(" "),e("li",[t._v("这里会有多移动的情况")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("O(n)复杂度的递归比较")])]),t._v(" "),e("h2",{attrs:{id:"_14-既然vue通过数据劫持可以精准探测数据变化-为什么还需要虚拟dom进行diff检测差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-既然vue通过数据劫持可以精准探测数据变化-为什么还需要虚拟dom进行diff检测差异"}},[t._v("#")]),t._v(" 14.既然Vue通过数据劫持可以精准探测数据变化，为什么还需要虚拟DOM进行"),e("code",[t._v("diff")]),t._v("检测差异")]),t._v(" "),e("ul",[e("li",[t._v("如果给每个属性都去增加watcher , 而且粒度太小也是不好控制, 降低watcher的数量 （每一个组件都有一个watcher） 可以通过diff算法来优化渲染过程。  通过diff算法和响应式原理折中处理了一下")])]),t._v(" "),e("h2",{attrs:{id:"_15-请说明vue中key的作用和原理-谈谈你对它的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-请说明vue中key的作用和原理-谈谈你对它的理解"}},[t._v("#")]),t._v(" 15.请说明Vue中key的作用和原理，谈谈你对它的理解")]),t._v(" "),e("p",[t._v("isSameVnode中会根据key来判断两个元素是否是同一个元素，key不相同说明不是同一个元素 （key在动态列表中不要使用索引 -》 bug）\n我们使用key 尽量要保证key的唯一性 （这样可以优化diff算法）")]),t._v(" "),e("h2",{attrs:{id:"_16-谈一谈对vue组件化的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-谈一谈对vue组件化的理解"}},[t._v("#")]),t._v(" 16.谈一谈对Vue组件化的理解")]),t._v(" "),e("p",[t._v("组件的优点：  组件的复用可以根据数据渲染对应的组件 ， 把组件相关的内容放在一起 （方便复用）合理规划组件，可以做到更新的时候是组件级更新  (组件化中的特性  属性， 事件， 插槽)")]),t._v(" "),e("blockquote",[e("p",[t._v("Vue中怎样处理组件 1） Vue.extend  根据用户的传入的对象生成一个组件的构造函数   2） 根据组件产生对应的虚拟节点 data:{hook:init}   3）做组件初始化 将我们的虚拟节点转化成真实节点 （组件的init方法）  new Sub().$mount()")])]),t._v(" "),e("h2",{attrs:{id:"_17-vue的组件渲染流程-init"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue的组件渲染流程-init"}},[t._v("#")]),t._v(" 17."),e("code",[t._v("Vue")]),t._v("的组件渲染流程  （init）")]),t._v(" "),e("ul",[e("li",[t._v("vm.$options.components['my'] = {my:模板}")]),t._v(" "),e("li",[t._v("创造组件的虚拟节点  createComponent    {tag:'my',data:{hook:{init}},componentOptions:{Ctor:Vue.extend( {my:模板})}}")]),t._v(" "),e("li",[t._v("创造真实节点的 createComponent  init -> new 组件().$mount()  -> vm.componentInstance")]),t._v(" "),e("li",[t._v("vm.$el 插入到父元素中")])]),t._v(" "),e("h2",{attrs:{id:"_18-vue组件更新流程-prepatch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue组件更新流程-prepatch"}},[t._v("#")]),t._v(" 18."),e("code",[t._v("Vue")]),t._v("组件更新流程     （prepatch）")]),t._v(" "),e("ul",[e("li",[t._v("组件更新会触发 组件的prepatch方法，会复用组件，并且比较组件的 属性 事件 插槽")]),t._v(" "),e("li",[t._v("父组件给子组件传递的属性是(props) 响应式的  , 在模板中使用会做依赖收集 收集自己的组件watcher")]),t._v(" "),e("li",[t._v("稍后组件更新了 会重新给props赋值  ， 赋值完成后会触发watcher重新更新")])]),t._v(" "),e("h2",{attrs:{id:"_19-vue中异步组件原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue中异步组件原理"}},[t._v("#")]),t._v(" 19."),e("code",[t._v("Vue")]),t._v("中异步组件原理")]),t._v(" "),e("p",[t._v("Vue中异步组件的写法有很多， 主要用作。大的组件可以异步加载的  markdown组件 editor组件。  就是先渲染一个注释标签，等组件加载完毕，最后在重新渲染 forceUpdate (图片懒加载)  使用异步组件会配合webpack")]),t._v(" "),e("blockquote",[e("p",[t._v("原理： 异步组件默认不会调用Vue.extend方法 所有Ctor上没有cid属性， 没有cid属性的就是异步组件。 会先渲染一个占位符组件. 但是如果有loading会先渲染loading ， 第一轮就结束了。 如果用户调用了resolve， 会将结果赋予给factory.resolved上面， 强制重新渲染。 重新渲染时候再次进入到resolveAsyncComponent中， 会直接拿到factory.resolved结果来渲染")])]),t._v(" "),e("h2",{attrs:{id:"_20-函数组件的优势及原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-函数组件的优势及原理"}},[t._v("#")]),t._v(" 20.函数组件的优势及原理")]),t._v(" "),e("blockquote",[e("p",[t._v("React中也区分两种组件 一种叫类组件 ， 一种叫函数式组件  （Sub 就是类组件 有this）  （函数组件 没有类就没有this，也没有所谓的状态，没有生命周期 beforeCreate created...,  好处就是性能好， 不需要创建watcher了）  函数式组件就是调用render拿到返回结果来渲染， 所以性能高")])]),t._v(" "),e("h2",{attrs:{id:"_21-vue组件间传值的方式及之间区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-vue组件间传值的方式及之间区别"}},[t._v("#")]),t._v(" 21.Vue组件间传值的方式及之间区别")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("props 父传递数据给儿子  属性的原理就是把解析后的props，验证后就会将属性定义在当前的实例上 vm._props (这个对象上的属性都是通过defineReactive 来定义的 （都是响应式的） 组件在渲染的过程中会去vm上取值 _props 属性会被代理到vm上)")])]),t._v(" "),e("li",[e("p",[t._v("emit 儿子触发组件更新  在创建虚拟节点的时候将所有的事件 绑定到了listeners ， 通过$on 方法绑定事件 通过$emit方法来触发事件 (发布订阅模式)")])]),t._v(" "),e("li",[e("p",[t._v("events Bus 原理就是 发布订阅模式 $bus = new Vue()   简单的通信可以采用这种方式")])]),t._v(" "),e("li",[e("p",[t._v("$parent $children  就是在创造子组件的时候 会将父组件的实例传入。 在组件本身初始化的时候会构建组件间的父子关系 $parent获取父组件的实例，通过$children 可以获取所有的子组件的实例")])]),t._v(" "),e("li",[e("p",[t._v("ref  可以获取dom元素和组件的实例  （虚拟dom没有处理ref， 这里无法拿到实例 也无法获取组件） 创建dom的时候如何处理ref的。 会将用户所有的dom操作及属性 都维护到一个cbs属性中 cbs (create update insert destroy....)。 依次调用cbs中create方法。 这里就包含ref相关的操作， 会操作ref 并且赋值")])]),t._v(" "),e("li",[e("p",[t._v("provide  （在父组件中将属性暴露出来）inject  在后代组件中通过inject注入属性  在父组件中提供数据， 在子组件中递归向上查找")])]),t._v(" "),e("li",[e("p",[t._v("$attrs (所有的组件上的属性 不涵盖props)  $listeners (组件上所有的事件)")])]),t._v(" "),e("li",[e("p",[t._v("Vue.observalble 可以创造一个全局的对象用于通信  用的也少")])]),t._v(" "),e("li",[e("p",[t._v("vuex")])])]),t._v(" "),e("h2",{attrs:{id:"_22-v-if和v-for哪个优先级更高"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-v-if和v-for哪个优先级更高"}},[t._v("#")]),t._v(" 22.v-if和v-for哪个优先级更高？")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_l")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'span'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_e")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("v-for的优先级更高 ，在编译的时候 会将 v-for 渲染成_l函数  v-if会变成三元表达式。  v-if 和 v-for不要在一起使用。")])]),t._v(" "),e("p",[t._v('v-if (控制是否渲染)  / v-show(控制的是样式  viisbility:hidden  display:none ?)  v-show=“true"  放在span上会变成块元素吗？  为什么不用  viisbility:hidden?  不能响应事件  (占位的) 为什么比用opacity 呢？ （透明度为0 占位） 可以响应事件的')]),t._v(" "),e("blockquote",[e("p",[t._v("v-if在编译的时候 会变成三元表达式   但是v-show 会变成一个指令")])]),t._v(" "),e("h2",{attrs:{id:"_23-v-if-v-model-v-for的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-v-if-v-model-v-for的实现原理"}},[t._v("#")]),t._v(" 23.v-if，v-model，v-for的实现原理")]),t._v(" "),e("ul",[e("li",[t._v("v-if会被编译成 三元表达式")]),t._v(" "),e("li",[t._v("v-for 会被编译成_l 循环")]),t._v(" "),e("li",[t._v("v-model  干什么的？  放在表单元素上可以实现双向绑定 ， 放在组件上就不一样了\n"),e("ul",[e("li",[e("p",[t._v("v-model 放在不同的元素上会编译出不同的结果，针对文本来说会处理文本 （会被编译成 value + input + 指令处理）  value 和 input实现双向绑定阻止中文的触发  指令作用就是处理中文输入完毕后 手动触发更新")])]),t._v(" "),e("li",[e("p",[t._v("v-model 绑定到组件上  这里会编译一个 model对象 组件在创建虚拟节点的时候会里有这个 对象。 会看一下里面是否有自定义的prop和event ，如果没有则会被解析成 value + input的语法糖")])])])])]),t._v(" "),e("h2",{attrs:{id:"_24-vue中slot是如何实现的-什么时候使用它"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-vue中slot是如何实现的-什么时候使用它"}},[t._v("#")]),t._v(" 24.Vue中slot是如何实现的？什么时候使用它？")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("普通插槽  （普通插槽渲染作用域在父组件中的）")]),t._v(" "),e("ul",[e("li",[t._v("在解析组件的时候会将组件的children 放到 componentOptions 上作为虚拟节点的属性")]),t._v(" "),e("li",[t._v("将children取出来放到组件的 vm.$options._renderChildren中")]),t._v(" "),e("li",[t._v("做出一个映射表放到vm.$slots上  -> 将结果放到 vm.$scopeSlots上   vm.$scopeSlots = {a:fn,b:fn,default:fn}")]),t._v(" "),e("li",[t._v("渲染组件的时候会调用_t 方法 此时会去vm.$scopeSlots找到对应的函数来渲染内容")])])]),t._v(" "),e("li",[e("p",[t._v("具名插槽  多增加了个名字")])]),t._v(" "),e("li",[e("p",[t._v("作用域插槽（普通插槽渲染作用域在子组件中的）")]),t._v(" "),e("ul",[e("li",[t._v("我们渲染插槽选择的作用域是子组件的  作用域插槽渲染的时候不会作为children, 将作用域插槽做成了一个属性scopedSlots")]),t._v(" "),e("li",[t._v("制作一个映射关系 $scopedSlots = {default:fn:function({msg}){return _c('div',{},[_v(_s(msg))])}}}")]),t._v(" "),e("li",[t._v("稍后渲染组件的模板的时候 会通过name找到对应的函数 将数据传入到函数中此时才渲染虚拟节点， 用这个虚拟节点替换_t('default')")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("vm.$scopeSlots {key:fn}   vm.$slots = {key:[vnode]}")])]),t._v(" "),e("h2",{attrs:{id:"_25-vue-use是干什么的-原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-vue-use是干什么的-原理是什么"}},[t._v("#")]),t._v(" 25.Vue.use是干什么的？原理是什么？")]),t._v(" "),e("ul",[e("li",[t._v("这里的use方法 目的就是将 vue的构造函数传递给插件中，让所有的插件依赖的Vue是同一个版本")]),t._v(" "),e("li",[t._v("默认调用插件   默认调用插件的install方法")]),t._v(" "),e("li",[t._v("vue-router和vuex里面的package的依赖里面没有vue是吧。是通过参数穿进去的")])]),t._v(" "),e("h2",{attrs:{id:"_26-vue事件修饰符有哪些-其实现原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-vue事件修饰符有哪些-其实现原理是什么"}},[t._v("#")]),t._v(" 26.Vue事件修饰符有哪些？其实现原理是什么？")]),t._v(" "),e("ul",[e("li",[t._v("实现主要靠的是模板编译原理   addEventListener( stop , defaultPrevent  ) self capture passvie once")]),t._v(" "),e("li",[t._v(".number")])]),t._v(" "),e("h2",{attrs:{id:"_27-vue中-sync修饰符的作用-用法及实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_27-vue中-sync修饰符的作用-用法及实现原理"}},[t._v("#")]),t._v(" 27.Vue中.sync修饰符的作用，用法及实现原理")]),t._v(" "),e("ul",[e("li",[t._v("和v-model 一样，这个api是为了实现状态同步的， 这个东西在vue3中被移除了")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("_c")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      attrs"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xx"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" info\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      on"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"update:xx"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("$event")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          info "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $event\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"_28-如何理解自定义指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_28-如何理解自定义指令"}},[t._v("#")]),t._v(" 28.如何理解自定义指令")]),t._v(" "),e("ul",[e("li",[t._v("自定义指令就是用户定义好对应的钩子，当元素在不同的状态时会调用对应的钩子 （所有的钩子会被合并到cbs 对应的方法上， 到时候依次调用）")])]),t._v(" "),e("h2",{attrs:{id:"_29-keep-alive平时在哪里使用-原理是"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_29-keep-alive平时在哪里使用-原理是"}},[t._v("#")]),t._v(" 29.keep-alive平时在哪里使用？原理是？")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("1.keep-alive在路由中使用")])]),t._v(" "),e("li",[e("p",[t._v("2.在component:is 中使用  （缓存）")])]),t._v(" "),e("li",[e("p",[t._v("keep-alive的原理是默认缓存加载过的组件对应的实例 内部采用了LRU算法")])]),t._v(" "),e("li",[e("p",[t._v("下次组件切换加载的时候 此时会找到对应缓存的节点来进行初始化，但是会采用上次缓存$el来触发 （不用在做将虚拟节点转化成真实节点了）  通过init -》 prepatch中了")])]),t._v(" "),e("li",[e("p",[t._v("更新和销毁会触发actived 和 deactived")])])]),t._v(" "),e("h2",{attrs:{id:"_30-组件中写name选项有哪些好处及作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_30-组件中写name选项有哪些好处及作用"}},[t._v("#")]),t._v(" 30.组件中写name选项有哪些好处及作用？")]),t._v(" "),e("h3",{attrs:{id:"可以实现递归组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可以实现递归组件"}},[t._v("#")]),t._v(" 可以实现递归组件")]),t._v(" "),e("ul",[e("li",[t._v("在vue中有name属性的组件可以被递归调用  （在写模板语法的时候 我们可以通过name属性来递归调用自己）")]),t._v(" "),e("li",[t._v("在声明组件的时候 Sub.options.components[name] = Sub")])]),t._v(" "),e("h3",{attrs:{id:"起到标识作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#起到标识作用"}},[t._v("#")]),t._v(" 起到标识作用")]),t._v(" "),e("ul",[e("li",[t._v("我们用来标识组件 通过name 来找到对应的组件 . 自己封装跨级通信")]),t._v(" "),e("li",[t._v("name属性可以用作devtool调试工具 来标明具体的组件")])])])}),[],!1,null,null,null);a.default=n.exports}}]);